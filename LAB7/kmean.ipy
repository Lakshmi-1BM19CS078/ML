import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
%matplotlib inline
In [5]:
df = pd.read_csv('income.csv')
df.head(10)
Out[5]:
Name	Age	Income($)
0	Rob	27	70000
1	Michael	29	90000
2	Mohan	29	61000
3	Ismail	28	60000
4	Kory	42	150000
5	Gautam	39	155000
6	David	41	160000
7	Andrea	38	162000
8	Brad	36	156000
9	Angelina	35	130000
In [6]:
scaler = MinMaxScaler()
scaler.fit(df[['Age']])
df[['Age']] = scaler.transform(df[['Age']])

scaler.fit(df[['Income($)']])
df[['Income($)']] = scaler.transform(df[['Income($)']])
df.head(10)
Out[6]:
Name	Age	Income($)
0	Rob	0.058824	0.213675
1	Michael	0.176471	0.384615
2	Mohan	0.176471	0.136752
3	Ismail	0.117647	0.128205
4	Kory	0.941176	0.897436
5	Gautam	0.764706	0.940171
6	David	0.882353	0.982906
7	Andrea	0.705882	1.000000
8	Brad	0.588235	0.948718
9	Angelina	0.529412	0.726496
In [7]:
plt.scatter(df['Age'], df['Income($)'])
Out[7]:
<matplotlib.collections.PathCollection at 0x1ec0aba95e0>

In [8]:
k_range = range(1, 11)
sse = []
for k in k_range:
    kmc = KMeans(n_clusters=k)
    kmc.fit(df[['Age', 'Income($)']])
    sse.append(kmc.inertia_)
sse
C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:881: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
Out[8]:
[5.434011511988179,
 2.091136388699078,
 0.4750783498553097,
 0.3625079900797329,
 0.2664030124668416,
 0.21055478995472496,
 0.1685851223602976,
 0.13265419827245162,
 0.10383752586603562,
 0.08026197041664467]
In [9]:
plt.xlabel = 'Number of Clusters'
plt.ylabel = 'Sum of Squared Errors'
plt.plot(k_range, sse)
Out[9]:
[<matplotlib.lines.Line2D at 0x1ec0b119c40>]

In [10]:
km = KMeans(n_clusters=3)
km
Out[10]:
KMeans(n_clusters=3)
In [11]:
y_predict = km.fit_predict(df[['Age', 'Income($)']])
y_predict
Out[11]:
array([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0])
In [12]:
df['cluster'] = y_predict
df.head()
Out[12]:
Name	Age	Income($)	cluster
0	Rob	0.058824	0.213675	1
1	Michael	0.176471	0.384615	1
2	Mohan	0.176471	0.136752	1
3	Ismail	0.117647	0.128205	1
4	Kory	0.941176	0.897436	2
In [13]:
df0 = df[df.cluster == 0]
df0
Out[13]:
Name	Age	Income($)	cluster
16	Dipika	0.823529	0.170940	0
17	Priyanka	0.882353	0.153846	0
18	Nick	1.000000	0.162393	0
19	Alia	0.764706	0.299145	0
20	Sid	0.882353	0.316239	0
21	Abdul	0.764706	0.111111	0
In [14]:
df1 = df[df.cluster == 1]
df1
Out[14]:
Name	Age	Income($)	cluster
0	Rob	0.058824	0.213675	1
1	Michael	0.176471	0.384615	1
2	Mohan	0.176471	0.136752	1
3	Ismail	0.117647	0.128205	1
11	Tom	0.000000	0.000000	1
12	Arnold	0.058824	0.025641	1
13	Jared	0.117647	0.051282	1
14	Stark	0.176471	0.038462	1
15	Ranbir	0.352941	0.068376	1
In [15]:
df2 = df[df.cluster == 2]
df2
Out[15]:
Name	Age	Income($)	cluster
4	Kory	0.941176	0.897436	2
5	Gautam	0.764706	0.940171	2
6	David	0.882353	0.982906	2
7	Andrea	0.705882	1.000000	2
8	Brad	0.588235	0.948718	2
9	Angelina	0.529412	0.726496	2
10	Donald	0.647059	0.786325	2
In [16]:
km.cluster_centers_
Out[16]:
array([[0.85294118, 0.2022792 ],
       [0.1372549 , 0.11633428],
       [0.72268908, 0.8974359 ]])
In [25]:
plt.scatter(df0['Age'], df0['Income($)'], marker='+', color='red')
plt.scatter(df1['Age'], df1['Income($)'], marker='*', color='blue')
plt.scatter(df2['Age'], df2['Income($)'], marker='^', color='green')
plt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:,1], color='black');

In [ ]:
 
